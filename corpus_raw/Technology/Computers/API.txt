API, in full application programming interface,  sets of standardized requests that allow different computer programs to communicate with each other.
APIs establish the proper way for a developer to request services from a program. They are defined by the receiving programs, make working with other applications easier, and allow programs to communicate across different computing platforms. A program without an API would not be able to work with other applications very effectively. Examples of  APIs are remote procedure calls (RPCs), which allow the use of a program’s procedures by other programs; standard query language (SQL), which establishes a standardized way to access databases; file transfer APIs, which establish ways to upload and download files; and message delivery APIs, which pass messages between programs and users. APIs also provide applications with graphics and sound, add networking capabilities, handle security and data translation, and manage access to system resources such as memory and hardware devices.
APIs can take the form of a commercial software package component, a specially licensed software element, or an interface explicitly designed for a specific program, which is usually the most expensive. The extra effort of producing an API can be justified, as they often help a program’s relevance and longevity by allowing it to be accessed by other programs. Too much access, however, can result in an application’s being copied; in order to avoid copying, some organizations try to keep their APIs secret or constantly change them. Many computer programmers consider APIs a good compromise between the flexibility of open-source programs and the rigidity of closed applications.
