Open source,  social movement, begun by computer programmers, that rejects secrecy and centralized control of creative work in favour of decentralization, transparency, and unrestricted (“open”) sharing of information. Source refers to the human-readable source code of computer programs, as opposed to the compiled computer programming language instructions, or object code, that run on computers but cannot be easily understood or modified by people.
In closed-source, or proprietary, software development, only the object code is published; the source code is held secret in order to control customers and markets. Open-source projects reject this practice and publish all their source code on the Internet under licenses that allow free redistribution. An important feature of open-source development is that the resulting extensive peer review seems to do a better job of minimizing computer bugs and computer security risks than the typical in-house process of quality assurance at closed-source vendors.
Beyond computer software, the concept of open source has been used to create free online databases and by commercial Internet vendors to populate reviews of items for sale, such as books, music, and movies.
The roots of open source go back to computer science practices in the 1960s in academia and early computer user groups. Computer programmers frequently and informally shared code that they had written (“hacked”), quickly recycling and freely modifying code that solved common technical problems. Several different technical cultures began to develop, in parallel and semi-independently, practices similar to modern open-source development—though without today’s apparatus of common licenses and fast communication via the Internet.
The practice of sharing code was most effective and consistent among developers of the UNIX operating system, which was central to UNIX’s early success. UNIX was first developed about 1970 at the Bell Laboratories subsidiary of the AT&T Corporation for use on the Digital Equipment Corporation PDP-7 minicomputer. As UNIX was adapted for various computer hardware systems, new variants of the operating system were developed. By the time that AT&T and Sun Microsystems, Inc. (a proponent of the UNIX variant developed at the University of California, Berkeley), finally decided to commercialize UNIX in 1987, a large segment of computer manufacturers and software developers decided that they needed an “open” system and formed the Open Software Foundation. This set off the so-called “UNIX wars” among minicomputer enthusiasts.
The shift from informal sharing of code to explicit open-source practice actually began a few years earlier with Richard M. Stallman. Stallman, a charismatic programmer who had thrived in the computer science environment at the Massachusetts Institute of Technology (MIT), collided with the increasing commercialization of software in the early 1980s. With more companies blocking access to their source codes, Stallman felt frustrated in his efforts to fix and improve these codes, so he decided that proprietary software must be publicly opposed. In 1984 he resigned from MIT to found the GNU Project, with the goal of developing a completely free UNIX-like operating system. (GNU is a recursive acronym for “GNU’s not UNIX.”) In 1985 he delivered the “GNU Manifesto” outlining his program of free software development, formed the Free Software Foundation (FSF), and launched what he called the free software movement.
Stallman may have been the first to propose a label for what many computer programmers had been doing all along, but the term free software was never universally accepted among programmers. Before Stallman issued the “GNU Manifesto,” few programmers had any sense of being members of a social movement, and, once that sense developed, Stallman’s label carried too much ideological freight for many of them.
In pursuit of his ends, Stallman wrote the General Public License (GPL), a document attached to computer code that would legally require anyone distributing that code to make available any of their modifications and distributed works (a property Stallman called “copyleft”). In effect, he sought to codify the hacker ethos. By the end of the century, the GPL was the license of choice for approximately half of all open-source projects. The other half was divided among non-copyleft licenses, notably the MIT license, and various licenses based on the Berkeley Software Distribution (BSD), developed in the 1970s at the University of California at Berkeley.
After 1987 the availability of Intel Corporation’s 32-bit 386 microprocessor meant that inexpensive personal computers (PCs) had sufficient power to run UNIX—in fact, the SCO Group released the first version of UNIX to run on the 386 that year. Some programmers who had been key players in the development of the BSD variant of UNIX founded a project called 386BSD to port that variant to PCs. The Free Software Foundation’s HURD operating system project also refocused on the 386-based PC. But both projects lagged at a critical time, 386BSD because of a lawsuit and HURD because of unrealistic design goals.
By 1991 Internet access had become sufficiently common that e-mail could knit together a large worldwide community of volunteer developers and function as an effective distribution medium for software. The FSF and the 386BSD project were slow to grasp these possibilities. Linus Torvalds, a student at Finland’s University of Helsinki, stepped into the gap. Using the GPL and programming tools from the GNU Project, in 1991 he announced an Internet-centred effort to develop a PC UNIX of his own—Linux.
Linux was the first major Internet-centred open-source project. Torvalds encouraged contributions from everyone and issued updated releases of the kernel (the UNIX-like operating system at the core of Linux) at an unprecedented pace—weekly, sometimes even daily. The developer community around Linux grew with astonishing speed, absorbing refugees from the stagnation of the HURD project and the legal uncertainties surrounding BSD. By 1995 what would later be called the open-source community had become aware of itself as a community, and it increasingly adopted Linux as a common platform.
In 1997 computer programmer Eric Raymond (the author of this article) proposed a new theory of open source in his paper “The Cathedral & the Bazaar.” Raymond compared the centralization, secrecy, slow release tempo, and vertical management of traditional software development to a cathedral with its top-down hierarchal structure; the decentralization, transparency, openness, and peer networking of the Linux community he likened to a bazaar with its give-and-take negotiations. The paper advanced reasons that the bazaar-like distributed approach to software development could be expected to yield higher-quality software.
Where Stallman had framed his argument primarily in moral terms (“information needs to be free”), Raymond spoke in terms of engineering, rational choice, and market economics. He summed up his argument with this maxim: “Given a sufficiently large number of eyeballs, all [computer] bugs are shallow.” In early 1998 Raymond proposed the term open source as a description of the same community practices that Stallman had previously promoted under the free software phrase. With Raymond’s proposal—and replacement of the label free—came a new program of outreach to corporations and the media.
Under the open-source banner, the movement made huge strides during the “dot-com boom” of 1998–2000, and it kept those gains in the stock market bust that followed. By 2003 early doubts about whether open source could be the basis for a viable business model had been largely resolved. The open-source community’s commercial partners included both midsized firms with community roots (such as Red Hat Software, Inc.) and large corporations (such as IBM and the Hewlett-Packard Company) intent on capturing the efficiencies and marketing pull of open source.
In the new climate, governments in the United States and around the world began to question the wisdom of relying on proprietary code, which they could neither examine nor modify. Open-source advocates argued, with some success, that reliance on proprietary software could leave governments open to dangerous security breaches that software providers might be slow to fix. In contrast, they argued that the independent scrutiny of open-source programs offered the most effective possible audit. More political pressure developed when governments outside the United States began to wonder why they were paying large licensing fees to foreign corporations, especially when open source would make it possible to localize software for language communities too small for those foreign corporations to invest in serving.
In Raymond’s view, the shift to open source is being forced by the failure of other software verification methods to scale up as software becomes more complex—a view that has moved from mere speculation to nearly conventional wisdom within the open-source community. There remains, however, some political tension in the community between free software purists and pragmatists, with the former sometimes insisting on an identity separate from the rest of the open-source movement. This fissure roughly parallels the split between GPL and non-copyleft licences such as BSD and MIT.
Technically, the open-source community remains close to its UNIX roots. The largest and most important faction remains the development network around the Linux operating system, which is fast eclipsing older UNIX variants. Other prestigious and significant open-source projects include the Apache World Wide Web server, the Firefox Web browser, the Perl and Python computer languages, and Stallman’s Emacs editor.
While Stallman, Torvalds, and Raymond have been relatively reluctant to discuss the application of open-source principles outside of software, others have been inspired by them. Wikipedia, a free, user-edited online encyclopaedia, was founded in explicit imitation of the open-source programming movement, as was the open publications movement in the sciences (see Internet: Electronic publishing) and the open genomics movement in bioinformatics. The influence of open-source programming philosophy (and the code it has built) is pervasive in Web-based social networking sites such as eBay, Amazon, LiveJournal, and MySpace, where comments and product reviews are an essential feature of their commercial success and popularity. Perhaps most significant for future economic development around the world, visionaries are seeking ways to harness the “many-eyeballs effect” with networked organizations that emulate the observed structure of open-source software development teams.
